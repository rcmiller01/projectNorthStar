name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  lint_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-py311-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-py311-
            pip-
      - name: Install dev extras
        run: pip install -e .[dev]
      - name: Check (fmt+lint+tests)
        run: make check

  # Removed preflight and teardown guard for minimal open-source CI; can be re-added with secrets.

  eval_metrics:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [ lint_test ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-py311-dev-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-py311-
            pip-
      - name: Install dev extras
        run: pip install -e .[dev]
      - name: Run micro eval (stub)
        env:
          MIN_HIT_RATE: "0.60"
          MAX_MIN_DIST: "0.40"
          MIN_VERIFIER: "0.70"
        run: make eval-ci
      - name: Upload eval results
        uses: actions/upload-artifact@v4
        with:
          name: eval-results
          path: metrics/eval_results.json
      - name: Show eval summary
        if: always()
        run: |
          echo "### Eval Metrics" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat metrics/eval_results.json | jq .aggregate >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY

  eval_metrics_main:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [ lint_test ]
    env:
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      DATASET: ${{ secrets.DATASET }}
      LOCATION: ${{ secrets.LOCATION }}
      BIGQUERY_REAL: '1'
      MIN_HIT_RATE: '0.60'
      MAX_MIN_DIST: '0.40'
      MIN_VERIFIER: '0.70'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-py311-all-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-py311-
            pip-
      - name: Install extras
        run: pip install -e .[bigquery,dev]
      - name: Run micro eval (real)
        run: make eval-ci
      - name: Upload eval results
        uses: actions/upload-artifact@v4
        with:
          name: eval-results-main
          path: metrics/eval_results.json
      - name: Show eval summary
        if: always()
        run: |
          echo "### Eval Metrics (main)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat metrics/eval_results.json | jq .aggregate >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY

  public_sweep:
    runs-on: ubuntu-latest
    needs: [ lint_test ]
    # Run on both PRs and main; after lint/tests (and independent of eval success)
    if: ${{ always() && (github.event_name == 'pull_request' || github.ref == 'refs/heads/main') }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install minimal deps
        run: pip install -e .[dev]
      - name: Run public sweep
        run: python scripts/public_sweep.py
      - name: Summarize sweep
        if: always()
        run: |
          echo "### Public Sweep" >> $GITHUB_STEP_SUMMARY
          echo "Ran public_sweep.py; review logs above for any WARN lines." >> $GITHUB_STEP_SUMMARY
